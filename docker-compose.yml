version: "3.1"
services:
  messager:
    image: rabbitmq:3.7.2
    hostname: my-rabbit
    networks:
      net:
    logging:
      driver: "none"
  phantomjs:
    image: superpolkadance/phantomjs:1.0
    command: phantomjs --webdriver=8910
    networks:
      scrape:
        aliases:
          - phantomjs
          - browser
    deploy:
      restart_policy:
        condition: on-failure
  redis:
    image: redis
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      net:
    volumes:
      - redis-db:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    logging:
      driver: "none"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  web:
    image: superpolkadance/dailywoofweb
    build: web
    command: ./bin/app
    networks:
      net:
        aliases:
          - redis
    ports:
      - "8080:8080"
    depends_on:
      - redis
    environment:
      - PORT=8080
      - BUILD=$BUILD
      - GIN_MODE=$GIN_MODE
    volumes:
      - web-stuff:/go/src/app/dist
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
  natlang:
    image: superpolkadance/dailywoofnlp
    build: natlang
    command: python app.py
    depends_on:
      - redis
      - messager
    networks:
      net:
        aliases:
          - redis
          - messager
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
  images:
    image: superpolkadance/dailywoofimages
    build: images
    command: python app.py
    networks:
      net:
        aliases:
          - redis
          - messager
    depends_on:
      - redis
      - messager
    environment:
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
  frontend:
    image: superpolkadance/dailywooffrontend
    build: frontend
    command: npm run build
    volumes:
      - web-stuff:/go/src/app/dist
    environment:
      - BUILD=$BUILD
  scraper:
    image: superpolkadance/dailywoofscraper
    build: scraper
    command: python app.py
    depends_on:
      - phantomjs
    networks:
      net:
        aliases:
          - redis
          - messager
      scrape:
        aliases:
          - browser
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
volumes:
  web-stuff:
  redis-db:
networks:
  net:
  scrape:
